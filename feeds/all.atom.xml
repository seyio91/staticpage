<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Seyi Obaweya</title><link href="https://www.seyiobaweya.tech/" rel="alternate"></link><link href="https://www.seyiobaweya.tech/feeds/all.atom.xml" rel="self"></link><id>https://www.seyiobaweya.tech/</id><updated>2020-02-26T10:20:00+00:00</updated><subtitle>Tech Lover</subtitle><entry><title>Deploying your Python Script to Lambda - Part 2</title><link href="https://www.seyiobaweya.tech/articles/2020-02-26/python-deploy-aws-lambda/" rel="alternate"></link><published>2020-02-26T10:20:00+00:00</published><updated>2020-02-26T10:20:00+00:00</updated><author><name>Seyi Obaweya</name></author><id>tag:www.seyiobaweya.tech,2020-02-26:/articles/2020-02-26/python-deploy-aws-lambda/</id><summary type="html">&lt;p&gt;After successfully creating our script, we will be using the AWS Lambda service to deploy the script. This article walks you through the process of setting up the lambda function.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second article in the 2 part series "Creating a Python Love Poem". This Article covers deploying your Python script to AWS Lambda Service.&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.seyiobaweya.tech/articles/2020-02-25/python-love-poem/"&gt;Setting Up Pelican Site Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deploying your Python Script to Lambda&lt;/strong&gt; &amp;lt;-- this article&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/pythonawslambda.png" alt="AWS Lambda Functions and Python"&gt;
&lt;/figure&gt; 
&lt;/p&gt;

&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://www.seyiobaweya.tech/articles/2020-02-25/python-love-poem/"&gt;&lt;strong&gt;Part One&lt;/strong&gt;&lt;/a&gt;, our code has been tested and is ready for deployment. With the advent of serverless computing, it would be a waste of resources to run a task as small as this. Here is Where AWS Lambda comes in.&lt;br&gt;
AWS Lambda Service is a serverless cloud computing service that runs small pieces of code/ functions without the need for a server making you only pay for the compute time you consume. Also, Aws lambda service gives a million requests for free in a month. making it perfect as we would be making less than 100 requests for this project  &lt;/p&gt;
&lt;h3&gt;Creating your Lambda Function&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You'll need to have an AWS account to run this project.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Sign in to your AWS console.  &lt;/li&gt;
&lt;li&gt;Under Services, Select Lambda service under the Compute Category   &lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Create Function&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Enter the Name of the New Function  &lt;/li&gt;
&lt;li&gt;Specify the Runtime Environment of the Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Function runtimes are the languages and versions supported by AWS and are used for the execution of the function. Your function runtime version should be similar to your development environment. Our script is written in python and we can check the closest version by running the following  command on our development terminal&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python --version

Python &lt;span class="m"&gt;3&lt;/span&gt;.6.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Select the closest Runtime to your Python version to your development environment&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/create_function.JPG" alt="Creating a Function"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 1. Creating a Function.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;You are now redirected to a Designer page which shows you an overview of your function. The Designer Page is used for function configuration such as adding Event Triggers, Layers and other Actions related to other AWS services. Below the Designer, you have the code Editor which displays a default function structure, the code editor allows you to make changes to your function on the AWS console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import json

def lambda_handler&lt;span class="o"&gt;(&lt;/span&gt;event, context&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="c1"&gt;# TODO implement&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;statusCode&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;200&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;: json.dumps&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from Lambda!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;The Lambda function takes in a function handler &lt;code&gt;lambda_handler(event, context)&lt;/code&gt; which has 2 arguments &lt;code&gt;event&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;. The event parameter is used to pass data into your function, while the context provides the runtime information to the function. The Handler acts as an entry point for your function, which is similar to the &lt;code&gt;if __name__ == "__main__"&lt;/code&gt; line in python used to ensure a block of code executes when a script is run on the command-line. The Handler also returns JSON-formatted data.&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/step20.JPG" alt="Function Homepage"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 2. Designer Page.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h3&gt;Installing Dependencies&lt;/h3&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;AWS provides a list of available Python libraries that can be imported into your project, however you start to encounter issues when you need libraries that are not available by default such as the Twilio and BeautifulSoup Libraries used in our script. To make deployments easier AWS lambda service allows users to install libraries locally and upload as Lambda Layers.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lambda Layers&lt;/strong&gt;  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;A Lambda Layer is a ZIP archive that contains libraries. Layers are very useful if you have various Lambda functions using the same dependencies since the dependencies will be imported into the Lambda function at runtime. The main benefit of this is that you utilize your dependencies more efficiently, resulting in smaller deployment bundles that make deployments faster.  &lt;/p&gt;
&lt;p&gt;To create a Layer, The Python dependencies will be installed to a directory, which will then be zipped and uploaded as a Lambda layer. 
Note, when a Layer ZIP archive is loaded into AWS Lambda, it is unzipped to the /opt folder. The Libraries should be placed inside a &lt;code&gt;python&lt;/code&gt; directory to enable the Python lambda function to import the library.&lt;/p&gt;
&lt;p&gt;Create a directory named python to hold your dependencies  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install all dependencies to the directory with the &lt;code&gt;-t&lt;/code&gt; flag&lt;br&gt;
&lt;code&gt;pip install &amp;lt;dependency-name&amp;gt; -t python&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Twilio requests -t python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compress the python directory into a zip file&lt;br&gt;
N.B. Install zip utility if not present on your system. &lt;code&gt;apt-get install zip&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zip -r twiliodeps.zip python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to upload, you can use the AWS CLI or the AWS console&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aws lambda publish-layer-version --layer-name twiliodep --zip-file fileb://twiliodeps.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Created Zip file can also be uploaded on the AWS Console  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;On your Lambda Service Console, Click on Layers  &lt;/li&gt;
&lt;li&gt;Give your Layer a Unique Name and a Description (optional)  &lt;/li&gt;
&lt;li&gt;Select Upload a .zip file  &lt;/li&gt;
&lt;li&gt;Click Upload a File and Select your Zipped File  &lt;/li&gt;
&lt;li&gt;Choose Compatible Runtime (similar Runtime to your development environment)  &lt;/li&gt;
&lt;li&gt;Create  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/layers1.JPG" alt="Creating a Layer"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 3. Creating a Layer.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;After creating and Uploading your Layers, the dependencies can be imported in the script&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;On the Designer, Click on Layers,&lt;/li&gt;
&lt;li&gt;A Layers section will appear below the designer. &lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Add a Layer&lt;/code&gt; which takes you to a page where you can select a layer to add&lt;/li&gt;
&lt;li&gt;Select the Layer you earlier created and Add.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/add_layer2.JPG" alt="Adding Layers to Lambda Function"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 4. Adding Layers to Lambda Function.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;On adding the Layer, the Designer shows the number of layers attached to your function&lt;/p&gt;
&lt;p&gt;we can then test if layers are imported by importing our dependencies into the function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import json
from twilio.rest import Client
from bs4 import BeautifulSoup as bs

def lambda_handler&lt;span class="o"&gt;(&lt;/span&gt;event, context&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="c1"&gt;# TODO implement&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;statusCode&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;200&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;: json.dumps&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from Lambda!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the function to add the dependencies and click on the &lt;code&gt;test&lt;/code&gt; button above the designer.
On your first run, you are prompted to create a default test event. Accept the Default Settings as we do not have any event being passed into our function.
Click the Test Button again&lt;/p&gt;
&lt;p&gt;if the layer was properly uploaded, the console returns a succeeded Status&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;img src="/images/success.JPG" alt="Test Success" align="center"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 5. Test Success.&lt;/figcaption&gt;
&lt;/figure&gt; &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h3&gt;Adding our code to the Lambda Function&lt;/h3&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;The functions are added above the main lambda handler, while the body for running our code will be included in the handler which is called at runtime. We also wrapped our code in a try/except block to catch errors raised.&lt;/p&gt;
&lt;p&gt;Our new code is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import json, sys, requests
import urllib.parse, boto3, random
from bs4 import BeautifulSoup as bs

def getMessage&lt;span class="o"&gt;()&lt;/span&gt;:
    ...


def _get_request&lt;span class="o"&gt;(&lt;/span&gt;url, payload&lt;span class="o"&gt;)&lt;/span&gt;:
    ...

&lt;span class="nv"&gt;transUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://translation.googleapis.com/language/translate/v2&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;randomLangUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://translation.googleapis.com/language/translate/v2/languages&amp;#39;&lt;/span&gt;

def lambda_handler&lt;span class="o"&gt;(&lt;/span&gt;event, context&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="c1"&gt;# TODO implement&lt;/span&gt;
    try:
        &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Client&lt;span class="o"&gt;(&lt;/span&gt;twiliosid, twiliotoken&lt;span class="o"&gt;)&lt;/span&gt;

        ...

        &lt;span class="nv"&gt;transResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _get_request&lt;span class="o"&gt;(&lt;/span&gt;transUrl, transPayload&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; transResponse.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translations&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translatedText&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; translate&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I Love You&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;, dest_language, gtranslateApiKey&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;randomQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; getMessage&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="nv"&gt;fulltextmsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; randomQuote + &lt;span class="s2"&gt;&amp;quot; \n P.S. &amp;quot;&lt;/span&gt; + msg

        &lt;span class="nv"&gt;loved_ones&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seyi&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;+26878514450&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; key, value in loved_ones.items&lt;span class="o"&gt;()&lt;/span&gt;:
            &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; client.messages.create&lt;span class="o"&gt;(&lt;/span&gt;
                                        &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dear &amp;quot;&lt;/span&gt; + key + &lt;span class="s2"&gt;&amp;quot;,\n&amp;quot;&lt;/span&gt; + fulltextmsg,
                                        &lt;span class="nv"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsapp:+14155238886&amp;#39;&lt;/span&gt;,
                                        &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsapp:&amp;#39;&lt;/span&gt; + value
                                    &lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;statusCode&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;200&lt;/span&gt;,
            &lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;: message.sid
        &lt;span class="o"&gt;}&lt;/span&gt;
    except:
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;statusCode&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;400&lt;/span&gt;,
            &lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Error, Bad Request&amp;#39;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Managing Secrets on Lambda&lt;/h3&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;In the previous part, we saw the importance of managing application secrets and were able to secure our secrets by using the .dotenv package and OS environment variables. We would be using the AWS Parameter Store to securely manage our API keys &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AWS Systems Manager Parameter Store provides secure, hierarchical storage for configuration data management and secrets management. You can store data such as passwords, database strings, and license codes as parameter values.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We would be storing our API keys by encrypting them in the parameter store and only importing it to our script during runtime.  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Sign in to your AWS Console and select an appropriate region.  &lt;/li&gt;
&lt;li&gt;Under Services, click on Systems Manager.  &lt;/li&gt;
&lt;li&gt;on the left menu pane, scroll down to the Parameter Store  &lt;/li&gt;
&lt;li&gt;Click on Create Parameter in the new window  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are 3 types of Parameters&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Secure String which would be used to encrypt our API keys using a KMS key that can be decrypted only by a permitted user  &lt;/li&gt;
&lt;li&gt;String List  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We then proceed to create parameters for our google and Twilio API keys  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Enter the Name of the keys you want to store. Example GAPIkey&lt;/li&gt;
&lt;li&gt;Enter the Description(Optional)  &lt;/li&gt;
&lt;li&gt;Select Secure String as Parameter Type. Under KMS key source select My current account if you want to use the KMS key present in your account.  &lt;/li&gt;
&lt;li&gt;From the drop-down list select the KMS Key ID you want to use to encrypt the values.  &lt;/li&gt;
&lt;li&gt;Enter the Value which you need to store and click on the Create Parameter.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After creating your keys, your parameter store should contain all 3 keys&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/step9.PNG" alt="Parameter Store"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 6. Parameter Store.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;You can also go into a key and view the decrypted value if signed in as a permitted user&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/step10.PNG" alt="Secured Key View"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 7. Secured Key View.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;A Faster approach to creating our parameters is by using the AWS CLI.&lt;/p&gt;
&lt;p&gt;Make sure your AWS CLI is configured to use your credentials&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aws configure
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creating SecureString Parameter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aws ssm put-parameter --name googleTranslateKey --type secureString --value &amp;lt;your-key&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creating String Parameter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aws ssm put-parameter --name twiliosid --type string --value &amp;lt;your-key&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Retrieving the Keys&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aws ssm get-parameter --name googleTranslateKey
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this returns a python dictionary which contains the string if the value is a plaintext string, while it returns an encrypted key for secureString&lt;/p&gt;
&lt;p&gt;to decrypt, pass the with-decrypt flag&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aws ssm get-parameter --name googleTranslateKey  --with-decrypt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Incorporating into our code
The keys will be imported into our function using the AWS SDK boto3, which allows us to make use of other AWS services such as s3, parameter store and Amazon EC2  in our function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import boto3

&lt;span class="nv"&gt;ssm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; boto3.client&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssm&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

def _getParameter&lt;span class="o"&gt;(&lt;/span&gt;someString&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;paramObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ssm.get_parameter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;someString, &lt;span class="nv"&gt;WithDecryption&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; paramObject&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parameter&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Value&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We import the boto3 library, then create a client for the ssm service.
The next line creates the &lt;code&gt;_getParameter&lt;/code&gt; function which takes in a Parameter name, and returns the decrypted value using the ssm client that was created.&lt;/p&gt;
&lt;p&gt;Retrieving the Keys with the _getParameter function in the Lambda handler&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;gtranslateApiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _getParameter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GtranslateApiKey&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;twiliotoken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _getParameter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;valapptokentwilio&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;twiliosid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _getParameter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsappsidtwilio&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Adding Roles to your Function&lt;/h3&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;Save and Run your code after including the Secured keys, We however, get an &lt;code&gt;AccessDeniedException&lt;/code&gt; when the script tries to access the keys we created&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/permission_error.JPG" alt="Console Error"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 8. Console Error.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;The error occurs because we initially chose the default execution role which only provides access to the Lambda service and we now have included the System Manager and KMS service into our function, and the default Role does not have permission to run those services. we would work around this by creating a new IAM role which gives our function access to the KMS service to decrypt our secret API keys&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IAM Roles&lt;/strong&gt;  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"IAM roles are a secure way to grant permissions to entities that you trust"&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;such as an AWS service that needs to act on resources in your account to provide its features. &lt;/p&gt;
&lt;h4&gt;Creating Roles in AWS&lt;/h4&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to the IAM Service&lt;/li&gt;
&lt;li&gt;Click Create Roles&lt;/li&gt;
&lt;li&gt;Select AWS Service as the type of trusted entity&lt;/li&gt;
&lt;li&gt;Select Lambda Use Case and Click on Permissions Button&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/step13.PNG" alt="Creating a Role"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 9. Creating a Role.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;You will be prompted to create a policy that will be attached to the role being created. Policies are Objects that define permissions for specific AWS resources and services.&lt;br&gt;
We would be creating Policies and attaching the Listed Permissions &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;dl&gt;
&lt;dd&gt;Service: Lambda  &lt;/dd&gt;
&lt;dd&gt;Action: Read  &lt;/dd&gt;
&lt;dd&gt;Resources: All  &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;This will grant the policy user access run the Lambda function, Also add the KMS service with Decrypt access for decrypting our keys and System Manager service with the ReadParameters Access for reading keys from the Parameter Store&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;dl&gt;
&lt;dd&gt;Service: KMS  &lt;/dd&gt;
&lt;dd&gt;Action: Decrypt  &lt;/dd&gt;
&lt;dd&gt;Resources: All  &lt;/dd&gt;
&lt;/dl&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;dl&gt;
&lt;dd&gt;Service: System Manager  &lt;/dd&gt;
&lt;dd&gt;Actions: Read (getParameter and getParameters)  &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Review Policy and Give a Policy Name&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/policy-creation.JPG" alt="Creating a Policy"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 10. Creating a Policy.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;After Creating your Policy, Navigate to your Role tab to Attach the Policy that was created.&lt;br&gt;
Also, Give the Role a name and Save Role.&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/roles-saved.JPG" alt="Role Summary"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 11. Role Summary.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Adding the New Role to the Lambda Function&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;Head back to your Function Designer Page, under the Execution Role Section, Select &lt;code&gt;Choose Existing Role&lt;/code&gt;. Several Roles are Populated into the existing Roles Field, Search and Select the Role that you recently created for the Lambda Function.  &lt;/p&gt;
&lt;p&gt;Our final code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import json, sys, requests
import urllib.parse, boto3, random
from twilio.rest import Client
from bs4 import BeautifulSoup as bs

&lt;span class="nv"&gt;ssm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; boto3.client&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssm&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;


def getMessage&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.serenataflowers.com/pollennation/love-messages/&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;url&lt;span class="o"&gt;)&lt;/span&gt;
    try:
        res.raise_for_status&lt;span class="o"&gt;()&lt;/span&gt;
    except requests.exceptions.HTTPError:
        sys.exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; bs&lt;span class="o"&gt;(&lt;/span&gt;res.text, &lt;span class="nv"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;listOfMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; soup.select&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.simple-list li&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;textMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;item.text &lt;span class="k"&gt;for&lt;/span&gt; item in listOfMessages&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;randomquote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; random.choice&lt;span class="o"&gt;(&lt;/span&gt;textMessages&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; randomquote

def _get_request&lt;span class="o"&gt;(&lt;/span&gt;url, payload&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;url, &lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;payload&lt;span class="o"&gt;)&lt;/span&gt;
    try:
        r.raise_for_status&lt;span class="o"&gt;()&lt;/span&gt;
    except requests.exceptions.HTTPError:
        print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error: the Request failed.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        sys.exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; json.loads&lt;span class="o"&gt;(&lt;/span&gt;r.content.decode&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; response

def _getParameter&lt;span class="o"&gt;(&lt;/span&gt;someString&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;paramObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ssm.get_parameter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;someString, &lt;span class="nv"&gt;WithDecryption&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; paramObject&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parameter&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Value&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nv"&gt;transUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://translation.googleapis.com/language/translate/v2&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;randomLangUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://translation.googleapis.com/language/translate/v2/languages&amp;#39;&lt;/span&gt;


def lambda_handler&lt;span class="o"&gt;(&lt;/span&gt;event, context&lt;span class="o"&gt;)&lt;/span&gt;:
    try:
        &lt;span class="nv"&gt;gtranslateApiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _getParameter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GtranslateApiKey&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;twiliotoken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _getParameter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;valapptokentwilio&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;twiliosid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _getParameter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsappsidtwilio&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Client&lt;span class="o"&gt;(&lt;/span&gt;twiliosid, twiliotoken&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="nv"&gt;randomLangPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: gtranslateApiKey&lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;destResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _get_request&lt;span class="o"&gt;(&lt;/span&gt;randomLangUrl, randomLangPayload&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;dest_language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; random.choice&lt;span class="o"&gt;(&lt;/span&gt;destResponse&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;languages&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;

        &lt;span class="nv"&gt;transPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;,
            &lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;: dest_language,
            &lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: gtranslateApiKey,
            &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;: urllib.parse.quote&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I Love You&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;transResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _get_request&lt;span class="o"&gt;(&lt;/span&gt;transUrl, transPayload&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; transResponse.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translations&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translatedText&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; translate&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I Love You&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;, dest_language, gtranslateApiKey&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;randomQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; getMessage&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="nv"&gt;fulltextmsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; randomQuote + &lt;span class="s2"&gt;&amp;quot; \n P.S. &amp;quot;&lt;/span&gt; + msg

        &lt;span class="nv"&gt;loved_ones&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seyi&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;+26878514450&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; key, value in loved_ones.items&lt;span class="o"&gt;()&lt;/span&gt;:
            &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; client.messages.create&lt;span class="o"&gt;(&lt;/span&gt;
                                        &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dear &amp;quot;&lt;/span&gt; + key + &lt;span class="s2"&gt;&amp;quot;,\n&amp;quot;&lt;/span&gt; + fulltextmsg,
                                        &lt;span class="nv"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsapp:+14155238886&amp;#39;&lt;/span&gt;,
                                        &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsapp:&amp;#39;&lt;/span&gt; + value
                                    &lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;statusCode&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;200&lt;/span&gt;,
            &lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;: message.sid
        &lt;span class="o"&gt;}&lt;/span&gt;
    except:
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;statusCode&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;404&lt;/span&gt;,
          &lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Error, Bad Request&amp;#39;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save your Function and Test. You should get a success status and a message is sent to the registered Number.  &lt;/p&gt;
&lt;h3&gt;Scheduling the Function Execution&lt;/h3&gt;
&lt;p&gt;The final part of our project is getting the function to run at scheduled time intervals (similar to using cron to run on our local development environment script). This is done through Lambda Triggers which invoke your function. &lt;br&gt;
We would be using a CloudWatch event Trigger to schedule Our script to run at the specified time.&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;On your Designer page, Click on &lt;code&gt;Add a Trigger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select Cloud watch events Trigger&lt;/li&gt;
&lt;li&gt;On the Rule Input, Select &lt;code&gt;Create a New Rule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enter a Rule Name&lt;/li&gt;
&lt;li&gt;Select the scheduled expression Rule Type&lt;/li&gt;
&lt;li&gt;Schedule expression - rate(2 hours)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can create rules that self-trigger on an automated schedule in CloudWatch Events using cron or rate expressions&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Rate Expressions: Syntax rate(int time)&lt;/li&gt;
&lt;li&gt;Cron Expressions: same as using Unix Cron Utility&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/step17.PNG" alt="Cloud Watch Event" style="margin: auto;"  class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 12. Cloud Watch Event.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;The Function should now Run at the scheduled time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wrapping Up&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;i hope this articles helps you understand better the steps to deploying a python script on the AWS Lambda service and integrating with other AWS services. Feel free to reach out if you need any help getting your script to work.&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;Ciao  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;The Source code for the article can be found &lt;a href="https://github.com/seyio91/twiliowhatsappscript" target="_blank"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Python_Automation"></category><category term="python"></category><category term="aws"></category><category term="webscraping"></category><category term="lambda"></category></entry><entry><title>Creating a Python Love Poem</title><link href="https://www.seyiobaweya.tech/articles/2020-02-25/python-love-poem/" rel="alternate"></link><published>2020-02-25T10:20:00+00:00</published><updated>2020-02-25T10:20:00+00:00</updated><author><name>Seyi Obaweya</name></author><id>tag:www.seyiobaweya.tech,2020-02-25:/articles/2020-02-25/python-love-poem/</id><summary type="html">&lt;p&gt;We'll be writing a python script that sends messages as part of a poem to our loved ones every hour, reminding them how much they are loved. This will be done by scraping a website using the beautiful soup library, the Twilio API to send the messages, and the script will be deployed on AWS lambda.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="/images/thumbnails/1000x400/valentine.jfif" alt="Love in the Air"&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;It's another Valentine's Day!!!. Lying down, thinking about doing something special for my loved one, being about 7000km away from her. After so much deliberation, sending a WhatsApp message to remind her how much I love her in a different language every hour, sounded like a fun and thoughtful idea.&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;In this tutorial, we will be writing a script to sends a Whatsapp message every hour to a number and deploying our script on AWS lambda. This will be written in python as that is my preferred language, if you have an interest in getting a nodejs version, you can put that in the comments.&lt;/p&gt;
&lt;h3&gt;Gettings Started!!&lt;/h3&gt;
&lt;p&gt;The article is broken into 3 sections: &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automating Whatsapp Message sending using Python:&lt;/strong&gt; 
One option is to use Python's Selenium package to open the WhatsApp web interface on a browser and control using the selenium web driver. This introduces new challenges, as WhatsApp requires QR code scanning to use the web interface,  making automation impossible. The other option is using the Twilio WhatsApp API, which allows developers to build prototypes in a sandbox environment. The Sandbox uses by default, a shared number to send messages to recipients. Using a personal number requires an application to Whatsapp, which might take time to be approved. 
The script will be created using the Twilio API because it is best suited for our small scale project as it is easy to set up and can be automated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating Messages to send.&lt;/strong&gt; 
The aim is to compose our poem using Love messages and also write &lt;code&gt;i love you&lt;/code&gt; in different languages. A sequence of steps will be taken to accomplish this.&lt;br&gt;
1) Scraping Messages off the internet- Composing a lot of messages for the project would take a lot of time, so why not make use of the available resources all over the internet?. This is done by scraping a website using the python beautiful soup library&lt;br&gt;
2) Translating Messages to Random Languages - The Google Translate API will be used to get a random Language and translating our texts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deploying our app.&lt;/strong&gt;
We will be deploying our script to AWS lambda, which is a cloud computing service that runs small pieces of code functions without the need for a server. This will help reduce costs as it removes the need for provisioning and maintaining a server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Running the script periodically.&lt;/strong&gt;
This will be done using the Cron Utility on our development server, while AWS Lambda Triggers will be used after deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align="center"&gt;
&lt;img src="/images/twiliologo.png" alt="Twilio WhatsApp API"&gt;  
&lt;/p&gt;

&lt;h1&gt;&lt;/h1&gt;
&lt;h3&gt;Sending Messages using the Twilio API&lt;/h3&gt;
&lt;p&gt;The Twilio Whatsapp API is easy and quick to set up, using a shared phone number without waiting for a dedicated number to be approved by Whatsapp.  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;To get started with the Twilio API, visit the &lt;a href="Twilio Website"&gt;twilio website&lt;/a&gt;  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;Create a Free Twilio account and confirm your email and phone number  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;The only con to using this method is that the sandbox is pre-provision with a Whatsapp Number that is shared across all sandbox users. &lt;br&gt;
&lt;strong&gt;N.B.&lt;/strong&gt;  Recipients have to go through a one-time permission process to receive messages. This works just fine for our small scale project. To activate the Twilio Sandbox. Navigate to Whatsapp Beta on the left side menu  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/step5.PNG" alt="Twilio WhatsApp Sandbox" class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 1. Twilio Whatsapp Sandbox.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;

&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;A Phone Number and an authentication Message are provided, Save the number on your device and send the provided message from your device. This is a one time process for every Recipient using your script. &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/whatsappconfirmation.jpeg" alt="Confirmation Message" class="enableModal" align="center"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 2. Success Reply.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;if successful, a reply is returned, The web interface also shows message received.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating the project&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;To view how the API works, visit the &lt;a href="https://www.twilio.com/docs/sms/whatsapp/api" target="_blank"&gt;API documentation to find the basic usage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After logging into the Twilio Console, take note of your Account SID and Auth Token. The Account SID is a unique identifier for your account, while the Auth Token is a secret key that should never be shared or else anyone will have full access to your Twilio account.&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/step7.PNG" alt="Twilio Project Dashboard" class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 3. Twilio DashBoard.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;Copy both keys, as they will later be used for authenticating with the API in your script&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create and activate a virtual environment for project isolation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 -m venv virtualenv
$ &lt;span class="nb"&gt;cd&lt;/span&gt; virtualenv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; . bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Create a project folder and GitHub repository.&lt;/strong&gt;   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir twiliowhatsapp &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; twiliowhatsapp
$ git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OR&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Automating the setup process using the &lt;a href="https://www.seyiobaweya.tech/articles/2020-01-17/new-project-script/" target="_blank"&gt;newproject script&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ newproject twiliowhatsapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Install the Twilio python library&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install Twilio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Creating your project script&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ touch whatsappcode.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Copy and paste the code from the whatsapp API documentation&lt;/strong&gt;&lt;br&gt;
(Also replace the &lt;strong&gt;sid&lt;/strong&gt; and &lt;strong&gt;auth_token&lt;/strong&gt;, and &lt;strong&gt;recipient phone number&lt;/strong&gt; with yours)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from twilio.rest import Client
&lt;span class="nv"&gt;account_sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;AC4bdca1b7084d0c29e62c381f60b8a041&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;auth_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;your_auth_token&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Client&lt;span class="o"&gt;(&lt;/span&gt;account_sid, auth_token&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; client.messages.create&lt;span class="o"&gt;(&lt;/span&gt;
                            &lt;span class="nv"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsapp:+14155238886&amp;#39;&lt;/span&gt;,
                            &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, there!&amp;#39;&lt;/span&gt;,
                            &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsapp:&amp;lt;recipient-number&amp;gt;&amp;#39;&lt;/span&gt;
                        &lt;span class="o"&gt;)&lt;/span&gt;

print&lt;span class="o"&gt;(&lt;/span&gt;message.sid&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can test your script to get a message sent to the recipient number&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python whatsappcode.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voila!!!, a message is received on the recipient phone&lt;/p&gt;
&lt;h3&gt;Securing our API keys on the development environment&lt;/h3&gt;
&lt;p&gt;Hard coding the API keys to our script is bad practice because it exposes sensitive information to the public when committing your code to a public repository. A way to avoid this is to externalize the keys and read from the os environment at runtime.&lt;br&gt;
The Python dotenv package can be used to externalize our keys by searching for a .env file that will contain our keys, and exports the variables into our script. The .env file should also be added to a .gitignore file so it is ignored when uploading your code to the public repository.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install the &lt;code&gt;python-dotenv&lt;/code&gt; package&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install python-dotenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the project folder, &lt;strong&gt;create a .env file and add your sid and token&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi .env
&lt;span class="nv"&gt;TWILIOSID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;your-sid&amp;gt;
&lt;span class="nv"&gt;TWILIO_AUTH_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;your-token&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Add .env filename to the gitignore file&lt;/strong&gt; so that it ignored by git when you make your commit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; .env &amp;gt;&amp;gt; .gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next process is importing the variables into our code so we can remove the insecure keys. Add the following code to your script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import os
from dotenv import load_dotenv

load_dotenv&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;override&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# load_dotenv(override=True). Overwrites already set system environments.&lt;/span&gt;

from twilio.rest import Client
&lt;span class="nv"&gt;account_sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TWILIOSID&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;auth_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TWILIO_AUTH_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Client&lt;span class="o"&gt;(&lt;/span&gt;account_sid, auth_token&lt;span class="o"&gt;)&lt;/span&gt;

...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, the key/value pairs in the .env file are now present as system environment variables and they can be conveniently accessed via os.environ.get() method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run the script&lt;/strong&gt; again and you should get the message on WhatsApp if there are no errors.&lt;/p&gt;
&lt;p&gt;Next verify your .env file is in the gitignore file, then commit your code to your repository&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -m &lt;span class="s2"&gt;&amp;quot;Message Client Working&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;STEP 2 Composing your messages&lt;/h3&gt;
&lt;p&gt;The next item on our list is creating the Poem we would be sending. This is divided into 3 parts&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Scraping Messages off the web&lt;/li&gt;
&lt;li&gt;Getting a Random Language&lt;/li&gt;
&lt;li&gt;Translating your Text to the random Language&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1 Scraping the webpage&lt;/h4&gt;
&lt;p&gt;Even though most people think I am a romantic, composing a long poem to send all through the day will be a tedious process. This led to the option of scraping messages off the tons of romantic messages online to create our poem. For the script, we would be scraping off &lt;a href="https://www.serenataflowers.com/pollennation/love-messages/" target="_blank"&gt;serenea flowers&lt;/a&gt; for their simple and thoughtful messages.&lt;/p&gt;
&lt;p&gt;We will be using the BeautifulSoup python package to scrape the messages.  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Install the beautifulsoup and requests library&lt;/strong&gt; for making HTTP requests and scraping the page&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install bs4 requests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In your project folder, &lt;strong&gt;create a new script for scraping the site and import the request and beautifulsoup library&lt;/strong&gt; into your file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ touch scraper.py &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; vi scraper.py

from bs4 import BeautifulSoup as bs
import requests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, make an HTTP request to the page we want to scrape and check for errors&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
&lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.serenataflowers.com/pollennation/love-messages/&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;url&lt;span class="o"&gt;)&lt;/span&gt;
try:
    res.raise_for_status&lt;span class="o"&gt;()&lt;/span&gt;
except requests.exceptions.HTTPError:
    sys.exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If our request is successful, the HTML document is then passed to beautifulsoup to create a beautiful soup object which we can run the select and find methods on&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then select all the messages in the soup object. To do this, we need to first get the HTML element path of the messages. This can be done using the &lt;code&gt;inspect element&lt;/code&gt; option in your web browser.  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p align="center"&gt;
&lt;figure&gt;
  &lt;img src="/images/step19.PNG" alt="Chrome Developer Tools" class="enableModal"&gt;
  &lt;figcaption style="text-align: center;"&gt;Figure 4. Chrome Developer Tools.&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;

&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;On viewing the developer console, the messages are nested inside a &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag within an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; tag with the class of &lt;code&gt;simple-list&lt;/code&gt;. The HTML code for the message is represented in the following structure&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ol&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;simple-list&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Message we are trying to access 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Message we are trying to access 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Message we are trying to access 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To select all &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags within the &lt;strong&gt;simple-list&lt;/strong&gt; class, we used the beautifulsoup &lt;code&gt;select()&lt;/code&gt; method and save the list to a variable &lt;code&gt;listOfMessages&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;listOfMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; soup.select&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.simple-list li&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# the space is used to specify element exists inside the class&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This returns a list of all &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags as beautifulsoup objects within the element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfMessages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;trying&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;trying&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;trying&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get the text in each element, the &lt;code&gt;text()&lt;/code&gt; method is used to extract texts from the object&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;textMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;listOfMessages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now there is a list of messages to choose from. We only need a message from the list each time the script is run. this is where the python &lt;code&gt;random&lt;/code&gt; module comes to our rescue. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Import the random library&lt;/strong&gt; at the beginning of the script, then use &lt;code&gt;random.choice()&lt;/code&gt; method to get a random message from the list at each run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import random

&lt;span class="nv"&gt;textMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;item.text &lt;span class="k"&gt;for&lt;/span&gt; item in listOfMessages&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;randomQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; random.choice&lt;span class="o"&gt;(&lt;/span&gt;textMessages&lt;span class="o"&gt;)&lt;/span&gt;

print&lt;span class="o"&gt;(&lt;/span&gt;randomQuote&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our code can be converted into a function that can be imported into our main &lt;code&gt;whatsappcode.py&lt;/code&gt; script. The final code should look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from bs4 import BeautifulSoup as bs
import requests, random

def getMessage&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.serenataflowers.com/pollennation/love-messages/&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;url&lt;span class="o"&gt;)&lt;/span&gt;
    try:
        res.raise_for_status&lt;span class="o"&gt;()&lt;/span&gt;
    except requests.exceptions.HTTPError:
        sys.exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; bs&lt;span class="o"&gt;(&lt;/span&gt;res.text, &lt;span class="nv"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;listOfMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; soup.select&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.simple-list li&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;textMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;item.text &lt;span class="k"&gt;for&lt;/span&gt; item in listOfMessages&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; random.choice&lt;span class="o"&gt;(&lt;/span&gt;textMessages&lt;span class="o"&gt;)&lt;/span&gt;

print&lt;span class="o"&gt;(&lt;/span&gt;getMessage&lt;span class="o"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Every time the script is run, a verse of our poem is generated. &lt;/p&gt;
&lt;h4&gt;2 Getting a Random Language&lt;/h4&gt;
&lt;p&gt;Repetition is a poetic technique used to draw a person's attention to a certain idea. we are aiming to emphasize the point that we love the message recipient by repeating the words &lt;code&gt;"i Love You"&lt;/code&gt; in every verse of the poem. To spice things up, the words will be translated to a random language in every verse. (i consider every other language to be much more romantic than English).&lt;br&gt;
The Google Translate API will be used in this step as I find it easy to use and free for our small scale project&lt;/p&gt;
&lt;p&gt;To use the Google API, you'll have to sign up with Google Cloud and get a developer API key. &lt;a href="https://cloud.google.com/docs/authentication/api-keys" target="_blank"&gt;visit here for details&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Add the key into the .env file&lt;/strong&gt; in your project folder to ensure the API key is not exposed in the script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi .env
&lt;span class="nv"&gt;GOOGLEAPIKEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;your-api-key&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The list of languages supported by Google Cloud can be accessed via the API &lt;code&gt;https://translation.googleapis.com/language/translate/v2/languages?key=&amp;lt;your-key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The request library will be used to access the API. This will return a JSON object, which will be parsed into a python dictionary using the JSON library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import your api key
&lt;span class="nv"&gt;gApiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.getenv&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GOOGLEAPIKEY&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;langApiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://translation.googleapis.com/language/translate/v2/languages&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key is then passed as a parameter to the request&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;langpayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: gApiKey&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;langApiUrl, &lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;langpayload&lt;span class="o"&gt;)&lt;/span&gt;
try:
    r.raise_for_status&lt;span class="o"&gt;()&lt;/span&gt;
except requests.exceptions.HTTPError:
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error: the Request failed.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    sys.exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if the request is successful, a JSON object is returned which is then parsed using the &lt;code&gt;json.loads()&lt;/code&gt; method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; json.loads&lt;span class="o"&gt;(&lt;/span&gt;r.content.decode&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we can then access the data from the converted python dictionary&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;dest_language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; random.choice&lt;span class="o"&gt;(&lt;/span&gt;destResponse&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;languages&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;

print&lt;span class="o"&gt;(&lt;/span&gt;dest_language&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Every time the script is run, a different language should be displayed.&lt;/p&gt;
&lt;h4&gt;3 Translating the text.&lt;/h4&gt;
&lt;p&gt;This is the same process as above, the only difference will be the URL and the parameters passed to requests library&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;transUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://translation.googleapis.com/language/translate/v2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The translate API takes the following parameters&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;source language - English&lt;/li&gt;
&lt;li&gt;target - This will be the result of the random language generated above&lt;/li&gt;
&lt;li&gt;key - Your Google API key&lt;/li&gt;
&lt;li&gt;q - this will be the text we are translating&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;transPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;: dest_language,
        &lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: gtranslateApiKey,
        &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;: urllib.parse.quote&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I Love You&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;N.B. To pass the text into to the payload, the text has to be encoded as spaces have no corresponding character within the standard ASCII character set  &lt;code&gt;'q': urllib.parse.quote('I Love You')&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;The result of the earlier code block, generating the random language is passed as into the payload as the destination language for the API&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;transUrl, &lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;transPayload&lt;span class="o"&gt;)&lt;/span&gt;
try:
    r.raise_for_status&lt;span class="o"&gt;()&lt;/span&gt;
except requests.exceptions.HTTPError:
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error: the Request failed.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    sys.exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;transresponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; json.loads&lt;span class="o"&gt;(&lt;/span&gt;r.content.decode&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to get the translated text from the generated python dictionary&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; transResponse.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translations&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translatedText&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On realizing there is a lot of repetition between the translated code and random language code block, a &lt;code&gt;_get_request&lt;/code&gt; function, which takes in a URL and some parameters, will be created to handle the requests for both processes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _get_request&lt;span class="o"&gt;(&lt;/span&gt;url, payload&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;url, &lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;payload&lt;span class="o"&gt;)&lt;/span&gt;
    try:
        r.raise_for_status&lt;span class="o"&gt;()&lt;/span&gt;
    except requests.exceptions.HTTPError:
        print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error: the Request failed.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        sys.exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; json.loads&lt;span class="o"&gt;(&lt;/span&gt;r.content.decode&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; response
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the &lt;code&gt;_get_request&lt;/code&gt; function can then be used by adding the following to the script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...

&lt;span class="nv"&gt;randomLangPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: gtranslateApiKey&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;destResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _get_request&lt;span class="o"&gt;(&lt;/span&gt;randomLangUrl, randomLangPayload&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;dest_language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; random.choice&lt;span class="o"&gt;(&lt;/span&gt;destResponse&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;languages&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;

&lt;span class="nv"&gt;transPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;: dest_language,
    &lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: gtranslateApiKey,
    &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;: urllib.parse.quote&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I Love You&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;transResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _get_request&lt;span class="o"&gt;(&lt;/span&gt;transUrl, transPayload&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; transResponse.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translations&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translatedText&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Combining All&lt;/h3&gt;
&lt;p&gt;All the functions that have been created can be imported into the Twilio client script either by copying all the code into one file or importing the functions from files. we will be going with the first option to mirror our lambda deployment script which will be created in the next article.&lt;/p&gt;
&lt;p&gt;Our scraped message and the translation of "I love you" is passed in as the message to the Twilio Client.&lt;/p&gt;
&lt;p&gt;The whatsappcode.py script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import json, sys, requests, random, os
import urllib.parse
from dotenv import load_dotenv
from twilio.rest import Client
from bs4 import BeautifulSoup as bs

load_dotenv&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;override&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# reading the environment variables&lt;/span&gt;
&lt;span class="nv"&gt;account_sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TWILIOSID&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;auth_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TWILIO_AUTH_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;gtranslateApiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GOOGLEAPIKEY&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

def getMessage&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.serenataflowers.com/pollennation/love-messages/&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;url&lt;span class="o"&gt;)&lt;/span&gt;
    try:
        res.raise_for_status&lt;span class="o"&gt;()&lt;/span&gt;
    except requests.exceptions.HTTPError:
        sys.exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; bs&lt;span class="o"&gt;(&lt;/span&gt;res.text, &lt;span class="nv"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;listOfMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; soup.select&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.simple-list li&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;textMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;item.text &lt;span class="k"&gt;for&lt;/span&gt; item in listOfMessages&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; random.choice&lt;span class="o"&gt;(&lt;/span&gt;textMessages&lt;span class="o"&gt;)&lt;/span&gt;

def _get_request&lt;span class="o"&gt;(&lt;/span&gt;url, payload&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;url, &lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;payload&lt;span class="o"&gt;)&lt;/span&gt;
    try:
        r.raise_for_status&lt;span class="o"&gt;()&lt;/span&gt;
    except requests.exceptions.HTTPError:
        print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error: the Request failed.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        sys.exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; json.loads&lt;span class="o"&gt;(&lt;/span&gt;r.content.decode&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; response

&lt;span class="nv"&gt;transUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://translation.googleapis.com/language/translate/v2&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;randomLangUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://translation.googleapis.com/language/translate/v2/languages&amp;#39;&lt;/span&gt;

&lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Client&lt;span class="o"&gt;(&lt;/span&gt;twiliosid, twiliotoken&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;randomLangPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: gtranslateApiKey&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;destResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _get_request&lt;span class="o"&gt;(&lt;/span&gt;randomLangUrl, randomLangPayload&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;dest_language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; random.choice&lt;span class="o"&gt;(&lt;/span&gt;destResponse&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;languages&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;

&lt;span class="nv"&gt;transPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;: dest_language,
        &lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: gtranslateApiKey,
        &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;: urllib.parse.quote&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I Love You&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;transResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; _get_request&lt;span class="o"&gt;(&lt;/span&gt;transUrl, transPayload&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; transResponse.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translations&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;translatedText&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;randomquote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; getMessage&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; translate&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I Love You&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;, dest_language, gtranslateApiKey&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;fulltextmsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; randomquote + &lt;span class="s2"&gt;&amp;quot; \n P.S. &amp;quot;&lt;/span&gt; + msg


&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; client.messages.create&lt;span class="o"&gt;(&lt;/span&gt;
                            &lt;span class="nv"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsapp:+14155238886&amp;#39;&lt;/span&gt;,
                            &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;fulltextmsg,
                            &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whatsapp:&amp;lt;your number&amp;gt;&amp;#39;&lt;/span&gt;
                        &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;statusCode&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;200&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;: message.sid
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Running the Script Periodically.&lt;/h3&gt;
&lt;p&gt;This will not be a lengthy section as there are a lot of articles on cron usage. Here is a &lt;a href="https://opensource.com/article/17/11/how-use-cron-linux/" target="_blank"&gt;good article on using Cron.&lt;/a&gt;
To run the script in cron, The python interpreter which the script will be using should be set by adding the path with a shebang at the top of the script.&lt;/p&gt;
&lt;p&gt;To get your executable path, in your activate virtual environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which python

/home/seyi/projects/bin/python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or Find the Path, which will always be located in the bin/ directory in your virtual environment&lt;/p&gt;
&lt;p&gt;Add the Following to the first line in your code &lt;code&gt;#!&amp;lt;your-env-path&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/home/seyi/projects/bin/python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please remember to change your path&lt;/p&gt;
&lt;p&gt;After Adding the Interpreter to be used, convert your script to an executable. you will need sudo access to carry out this action&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo chmod +x scriptname.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, note the Full path to your script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ realpath yourscriptname.py

/home/seyi/projects/whatsapp_val/whatsappCron.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then add this to crontab, to be run every hour during the day&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ crontab -e

&lt;span class="m"&gt;0&lt;/span&gt; */1 * * * /home/seyi/projects/whatsapp_val/whatsappCron.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script should be called at the start of the next hour and the verse of your poem will be sent to the recipient's number.&lt;/p&gt;
&lt;p&gt;The next article will cover deploying your script to AWS lambda&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Remember to remove your script from cron at the end of the day by commenting or deleting the line off cron, so you do not end up annoying the person you are sending the message to.&lt;/p&gt;
&lt;p&gt;The Source code for the article can be found &lt;a href="https://github.com/seyio91/twiliowhatsappscript" target="_blank"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Python_Automation"></category><category term="python"></category><category term="cron"></category><category term="webscraping"></category><category term="api"></category></entry><entry><title>Customizing your Pelican Static Site</title><link href="https://www.seyiobaweya.tech/articles/2020-01-28/customizing-your-site/" rel="alternate"></link><published>2020-01-28T10:20:00+00:00</published><updated>2020-01-28T10:20:00+00:00</updated><author><name>Seyi Obaweya</name></author><id>tag:www.seyiobaweya.tech,2020-01-28:/articles/2020-01-28/customizing-your-site/</id><summary type="html">&lt;p&gt;This is the second article in the series "&lt;strong&gt;Creating a Personal Static Website with Pelican&lt;/strong&gt;". This article covers modifying your site design using templates and pelican plugins.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second article in the series "&lt;strong&gt;Creating a Personal Static Website with Pelican&lt;/strong&gt;". This article covers modifying your site design.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.seyiobaweya.tech/articles/2020-01-20/personal-website-setup/"&gt;Setting Up Pelican Site Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customizing your Site&lt;/strong&gt;  &amp;lt;-- this article&lt;/li&gt;
&lt;li&gt;Hosting your Static Site on AWS S3 Buckets&lt;/li&gt;
&lt;li&gt;Creating your Pelican CD Pipeline using Travis&lt;/li&gt;
&lt;li&gt;Buying a Domain name and Pointing the Domain to your Bucket&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;&lt;p align="center"&gt;
&lt;img src="/images/article3-header.jpg" alt="Pelican Jinja Markdown"&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Pelican allows you to customize your website design by creating your preferred theme or using any of the themes created by the pelican community which can be found &lt;a href="http://www.pelicanthemes.com/"&gt;here&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;The themes should be cloned into your project folder and installed. To keep your project organized, It is advisable to store the themes in a separate directory.&lt;/p&gt;
&lt;p&gt;Pelican themes are managed using the &lt;code&gt;pelican-themes&lt;/code&gt; command-line tool. This is used to add, remove and list themes.&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pelican-theme -i themeFolder&lt;/code&gt; # installs the theme
the drawback to using this method is that theme must be removed and reinstalled on edit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pelican-themes -r themeName&lt;/code&gt; # Removes an installed Theme&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelican-themes -l -v&lt;/code&gt;  #list the installed themes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelican-themes --symlink themeFolder&lt;/code&gt; # This creates a symlink to the theme folder, changes you make on the themes are immediately propagated without having to reinstall the theme.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although the Pelican-theme command manages the themes for the pelican engine, the User has to specify which theme is to be used for the site in the Pelican site configuration. This is done by setting the Theme variable to the desired theme.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vi&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;themename&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;pathtotheme&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each theme also comes with some extra set of configuration variables to set certain behaviors, check the theme readme for more information. For the Flex Configuration visit &lt;a href="https://github.com/alexandrevicenzi/Flex/wiki/Configuration-example"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Installing the Flex Theme.&lt;/h3&gt;
&lt;p&gt;For my website, I choose the Flex theme due to the simplicity of its design. the link can be found &lt;a href="link"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create a new directory called themes and clone your desired theme to this directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;themes&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;alexandrevicenzi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Flex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install the Flex Theme&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Flex&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set the Website theme in Site Configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vi&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;themename&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On regenerating the HTML pages, the site appears with the new theme. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;devserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/images/thumbnails/846x427/pelican-flex-theme.JPG" alt="Pelican Flex"&gt;
&lt;p style="text-align: center;"&gt;&lt;b&gt;pelican Flex theme&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Theme Template Structure&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;stylesheet&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;awesome&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;pygments&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;archives&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;         &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="n"&gt;archives&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;          &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;processed&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;       &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;         &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;processed&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;            &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;             &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;articles&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;              &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;             &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;              &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;snippets&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;imported&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;
        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;cc_license&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;copyright&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
        &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;disqus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; contains all the static files which are to be copied to the generated output folder. All static assets can be included in this folder e.g. documents.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;templates&lt;/code&gt; contains all the templates that will be used to generate the content. The template files listed above are mandatory; you can add your templates if it helps you keep things organized while creating your theme.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Editing a template.&lt;/h3&gt;
&lt;p&gt;One of the advantages of using pelican is the ease of customization, Pelican uses the Jinja templating engine due to its flexibility and straightforward syntax, making themes easily customized to suit your design preferences. &lt;/p&gt;
&lt;p&gt;An example is changing the default social media share to a darker themed share for the article template.
here I took advantage of the jinja templating engine by creating the new feature as a partial template and only load when the variable assigned for using my dark themed share is called&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating the HTML template&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;First, create the template in partial/ directory inside my template directory.  The share theme template contains the HTML code for creating the dark share theme&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi themes/Flex/template/partial/darkshare.html

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sharepage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% set art_url = SITEURL + &amp;#39;/&amp;#39; + article.url %}
  &lt;span class="c"&gt;&amp;lt;!-- share test --&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: silver;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Share on: 
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;share-buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Share this on Facebook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.facebook.com/share.php?u={{ art_url|url_encode }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0 0 1792 1792&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759h-306v-759h-255v-296h255v-218q0-186 104-288.5t277-102.5q147 0 228 12z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The div tag contains an SVG images logo for each social media platform which acts as the link to share the articles to the platform. The Link for each article is inserted dynamically using the jinja templating language. Click &lt;a href="https://jinja.palletsprojects.com/en/2.11.x/"&gt;here&lt;/a&gt; for more info on Jinja Template. &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;{% set art_url = SITEURL + '/' + article.url %}&lt;/code&gt; this is used to set the absolute article URL by appending the site URL and article URL. this is done to call the absolute path when needed than always adding when needed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;{{ art_url|urlencode }}&lt;/code&gt; used to pass the jinja filter urlencode on the url defined earlier. filters act as functions to carry out actions on the value passed to them. this was passed as the Facebook share link uses the encoded url of the article it is sharing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Linking the template.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Templates can be loaded in other templates using jinja include method this allows templates to be better structured and reusable.&lt;br&gt;
The darkshare template will be attached at the bottom of every article, so we find the &lt;code&gt;article&lt;/code&gt; template and include the darkshare template at the bottom. Also note, we would also allow the user to turn off this feature by attaching a variable in the pelicanconf. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi themes/Flex/template/article.html

&lt;span class="o"&gt;{&lt;/span&gt;% &lt;span class="k"&gt;if&lt;/span&gt; SOCIAL_SHARE %&lt;span class="o"&gt;}&lt;/span&gt;  
  &lt;span class="o"&gt;{&lt;/span&gt;% include &lt;span class="s2"&gt;&amp;quot;partial/sharepage.html&amp;quot;&lt;/span&gt; %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endif %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;SOCIAL_SHARE&lt;/code&gt; is the variable used for managing the darkshare template. if the variable is set to false or not declared, the template is not imported into the article page.  &lt;/p&gt;
&lt;p&gt;Set the Social Share Variable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi pelicanconf.py
&lt;span class="nv"&gt;SOCIAL_SHARE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Styling your Template with CSS&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;custom css can be added to templates by defining the css file path in the STATIC_PATHS variable&lt;/p&gt;
&lt;p&gt;&lt;code&gt;STATIC_PATHS = ['images', 'static']&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The Flex theme has its variable for locating the custom CSS  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;CUSTOM_CSS = 'static/custom.css'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create your CSS file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;vi&lt;/span&gt; &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;css&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;share-buttons&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;share-buttons&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#d5d5d5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;share-buttons&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;facebook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#3B5998&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sharepage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#242121&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Other Flex Modification on my website.&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Article Pagination: To Display Links and Title to the previous and next article at the bottom of the page. uses the &lt;code&gt;LINK_PAGINATION&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;Side Category Menu: Displays All Categories on the sidebar. enable using the  &lt;code&gt;SIDE_CATEGORY&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;Recent Articles: Displays Most Recent Articles on Side Bar, Set RECENT_ARTICLE_COUNT Variable to Specify Number of Articles to display as recent, Defaults to 5 if not Set. &lt;code&gt;RECENT_PAGES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tag Cloud: Displays Most used tags using the Font size. Set using &lt;code&gt;SIDE_TAG_CLOUD&lt;/code&gt; Variable&lt;/li&gt;
&lt;li&gt;Hamburger Menu for Mobile View&lt;/li&gt;
&lt;li&gt;Back to Top Button&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Plugins&lt;/h3&gt;
&lt;p&gt;Also another way to add external features to pelican. This website uses the &lt;a href="https://github.com/AlexJF/pelican-advthumbnailer" target="_blank"&gt;advthumbnailer plugin&lt;/a&gt; for resizing images&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing the advthumbnailer plugin&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican-advthumbnailer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the plugin to the pelican config variable
PLUGIN = [advthumbnailer, otherplugins]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Plugin Use&lt;/strong&gt;   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;img src="images/thumbnails/&amp;lt;spec&amp;gt;/example.png" /&amp;gt;&lt;/code&gt; #the &lt;code&gt;thumbnails/&amp;lt;spec&amp;gt;&lt;/code&gt; is used by the plugin
Where spec is the scaling size e.g &lt;code&gt;200x300&lt;/code&gt;, or &lt;code&gt;200x&lt;/code&gt; to get a square resize &lt;/p&gt;
&lt;p&gt;e.g to display resize an image in images/test.png to 100x100.&lt;br&gt;
&lt;code&gt;&amp;lt;img src="images/test.png" /&amp;gt;&lt;/code&gt;&lt;br&gt;
to&lt;br&gt;
&lt;code&gt;&amp;lt;img src="images/thumbnails/100x/test.png" /&amp;gt;&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;After Customizing your site to your desired taste, Regenerate your Website, Review and Merge with the master branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
pelican --listen
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Livereload Library&lt;/h3&gt;
&lt;p&gt;One of the tools I use to enhance my productivity is the livereload Library and Browser Plugin. The Livereload Plugin refreshes your browser page when a file change is detected, while the Server watches specified files for change. &lt;br&gt;
This is used in addition to the pelican command wrapper which watch for changes and recompiles your pages, However, the pelican commands by default do not watch changes made to the Theme folder, only applying theme changes when the content or pelican configuration is edited.&lt;br&gt;
Another advantage of using the Livereload Plugin is the removal of the repetitive process of refreshing your page every time the HTML pages are regenerated. &lt;/p&gt;
&lt;p&gt;Using livereload Library is fairly easy.&lt;/p&gt;
&lt;p&gt;Install the Livereload Lib&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install python-livereload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create your livereload script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi reloader.py

from livereload import Server, shell
from pelican import Pelican
from pelican.settings import read_settings

&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Pelican&lt;span class="o"&gt;(&lt;/span&gt;read_settings&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelicanconf.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#reads the pelicanconf file using the read_setting function in pelican settings file&lt;/span&gt;

def compile&lt;span class="o"&gt;()&lt;/span&gt;:
    try:
        p.run&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#regenerates the HTML Pages&lt;/span&gt;
    except SystemExit as e:
        Pass  &lt;span class="c1"&gt;#ignores system errors during page regeneration&lt;/span&gt;

&lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Server&lt;span class="o"&gt;()&lt;/span&gt;
server.watch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content/&amp;#39;&lt;/span&gt;, compile&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#add directories or files to watch for changes&lt;/span&gt;
server.watch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;themes/&amp;#39;&lt;/span&gt;, compile&lt;span class="o"&gt;)&lt;/span&gt;
server.watch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./pelicanconf.py&amp;#39;&lt;/span&gt;, compile&lt;span class="o"&gt;)&lt;/span&gt;
server.serve&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#folder to be served and port&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to your preferred browser and install the Livereload Plugin.&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=en"&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/livereload-web-extension/"&gt;Firefox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After installing the Add-on. Run your Livereload script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python reloader.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can now access your Site at &lt;code&gt;localhost:8000&lt;/code&gt; and view your changes as you make them.&lt;/p&gt;
&lt;p&gt;The Next Article on &lt;strong&gt;Hosting Your Static Site on AWS S3&lt;/strong&gt; can be found &lt;a href="#"&gt;Here&lt;/a&gt;&lt;/p&gt;</content><category term="Web_Development"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Creating a Personal Static Website with Pelican</title><link href="https://www.seyiobaweya.tech/articles/2020-01-20/personal-website-setup/" rel="alternate"></link><published>2020-01-20T10:20:00+00:00</published><updated>2020-01-20T10:20:00+00:00</updated><author><name>Seyi Obaweya</name></author><id>tag:www.seyiobaweya.tech,2020-01-20:/articles/2020-01-20/personal-website-setup/</id><summary type="html">&lt;p&gt;The process of creating a personal blog can be a daunting task, as there are a lot of over engineered-options for running a simple blog. This article walks you through the process of getting your blog up and running through the use of a Static site generator which is known for its simplicity and performance.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="/images/pelican.png" alt="Pelican logo"&gt;&lt;/p&gt;
&lt;p&gt;I am excited to share the process of creating my personal website which was made to document my projects, share my learning journey and probably act as a portfolio. There are so many choices for creating a website, with easy options like WordPress, blogger and other hosted solutions, however being someone who likes tinkering, I prefer to host a website myself to be able to customize and break it. This led to discovering Static Site Generators in my quest for simple and cost-effective solutions.&lt;/p&gt;
&lt;p&gt;This seemed perfect as my blog will mainly be static HTML pages, giving me a variety of options for hosting. Another reason for choosing a static site generator was the ability to write content in Markdown removing the need for creating static pages by hand with HTML, which would be more effort than worth it. There are a ton of Static Site generators out there, List can be found &lt;a href="https://www.staticgen.com/" target="_blank"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Eventually, I ended up choosing &lt;strong&gt;Pelican&lt;/strong&gt; which is a python based Static Site Generator over other popular SSGs as python is my preferred scripting language making the setup and customization process easy for me. Also, pelican uses Jinja templating to generate its HTML which is straightforward and flexible&lt;/p&gt;
&lt;p&gt;I would not go in-depth into Pelican site generators. The &lt;a href="Documentation" target="_blank"&gt;documentation&lt;/a&gt; is quite extensive and easy to understand.&lt;/p&gt;
&lt;p&gt;The Article will be broken into the following Parts:  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Setting Up Pelican Site Generator&lt;/strong&gt; &amp;lt;-- this article&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Customizing your Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Hosting your Static Site on AWS S3 Buckets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Creating your Pelican CD Pipeline using Travis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Buying a Domain name and Pointing the Domain to your Bucket&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is quite shocking spinning up a website has become this easy, the total cost of the entire project has been $4 so far. The process of setting up this website is fast, simple and secure with the drawback of having the technical know-how. I hope this article simplifies the process.&lt;/p&gt;
&lt;h2&gt;Project Set-Up&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Installing a Python Virtual Environment&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;The first thing to do is preparing your python environment for the project, I use python virtual environments for my projects in other to perform some degree of isolation from other system projects&lt;/p&gt;
&lt;p&gt;installing the virtual-env package for ubuntu  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;installing the virtual-env package for centos  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;installing git for version control&lt;/p&gt;
&lt;p&gt;:::python&lt;br&gt;
sudo apt-get install git  &lt;/p&gt;
&lt;p&gt;Create a folder to hold your Virtual Environment. This will Act as your Project Root Folder&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above command installs some files in the project folder, Navigate into the activate the virtual environment with the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Installing Pelican Package&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Pelican can be Installed in the Virtual Environment using the Command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Markdown&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Create Git repo for your Pelican Project&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Create a new project using newproject script. link to article &lt;a href="https://www.seyiobaweya.tech/articles/2020-01-17/new-project-script/" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;newproject&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;currentdirectory&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="n"&gt;seyiobaweyasite&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, can create a new project manually using the following setps   &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;creating the project folder in the Virtual Environment and navigating to the directory  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;seyiobaweyasite&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;seyiobaweyasite&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;initialize git repo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;i would be using 2 branches in my repository, as the master branch would always contain the published website while our development will be done on the development branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setting Up Pelican&lt;/h3&gt;
&lt;p&gt;In the project folder, use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to start a new Pelican project. This will open an interactive command session that would ask questions about your website.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;

&lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
&lt;span class="n"&gt;needed&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Where&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;folder_to_use&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="n"&gt;BlogName&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Who&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;trailing&lt;/span&gt; &lt;span class="n"&gt;slash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someexample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Fabfile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;automate&lt;/span&gt; &lt;span class="n"&gt;generation&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;simpleHTTP&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;assist&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;FTP&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;SSH&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Dropbox&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Rackspace&lt;/span&gt; &lt;span class="n"&gt;Cloud&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Pages&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;seyiobaweyasite&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Pelican Quick Start Command Generates the Following Project Structure &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;Makefile&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;publishconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;output&lt;/code&gt; directory stores the static files (HTML/Images, PDF, ...) which are generated from the markdown content. These are the contents that are copied over to the directory/server hosting your site.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt; is the main configuration file for pelican. view &lt;a href="http://docs.getpelican.com/en/3.6.3/settings.html" target="_blank"&gt;link&lt;/a&gt; for more info. The settings you define in the configuration file will be passed to the templates, which allows you to use your settings to add site-wide content.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;demo-author&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;demo-site&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8000&amp;#39;&lt;/span&gt;   
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;  
&lt;span class="n"&gt;MAIN_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;  
&lt;span class="n"&gt;USE_FOLDER_AS_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;  
&lt;span class="n"&gt;DISABLE_URL_HASH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;  
&lt;span class="n"&gt;SUMMARY_MAX_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;  
&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;publishconf.py&lt;/code&gt; the file should contain the production-specific settings you want to add to your site. the file imports the pelicanconf.py file and overwrites the settings that are changed for production. After you have reviewed your site in your local development environment, the site can be published to the production environment with this configuration  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt; file for UNIX users that contains convenience tasks for common operations such as running the development server, building the html pages. it acts as an automation wrapper for the pelican commands&lt;br&gt;
allows the following commands. The commonly use make commands are:  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make html&lt;/code&gt; is used to generate html pages from the content directory. Equivalent of &lt;code&gt;pelican content&lt;/code&gt; command  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;make serve&lt;/code&gt; is a wrapper for &lt;code&gt;pelican --listen&lt;/code&gt;. This serves the output directory on the default port &lt;code&gt;localhost:8000&lt;/code&gt;. The command uses the default configuration file and port is no additional parameters are passed to it.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;make devserver&lt;/code&gt; performs the same actions as the make serve command with the additional task of watching the content folder and regenerating the static pages automatically if any changes are made to the content folder.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make publish&lt;/code&gt; is used to publish static pages using the &lt;code&gt;publishconf.py&lt;/code&gt; file which containts production specific settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The makefile can also be extended to perform users specific tasks such as creating an article template, building a new theme. (Future Post Consideration)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;content&lt;/code&gt; directory is where your articles/pages are stored. Articles can be written in markdown, Restructured Text or HTML. For the sake of keeping my pages organized, contents are kept in folders in the content directory  &lt;/p&gt;
&lt;p&gt;Sample content Structure&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;

&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;newcontent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;_content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="n"&gt;_content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;fav&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;python_icon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;site_logo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpeg&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpeg&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;
    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Writing Content&lt;/h3&gt;
&lt;p&gt;Content can be written in both Markdown and HTML syntax. I rather find markdown easy to use and sometimes infuse HTML elements in my markdown notes. The basic structure of a markdown article is found below. see the &lt;a href="http://docs.getpelican.com/en/3.6.3/content.html" target="_blank"&gt;pelican documentation&lt;/a&gt; for more info on writing content.&lt;br&gt;
The image below shows a sample article &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: My First Post  
Date: 2020-01-17 10:20  
Category: New_Posts  
Tags: bash, git  
Slug: my-first-post  
Author: Seyi Obaweya

Article Body Lorem ipsum dolor sit amet consectetur adipisicing elit...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Meta Data&lt;/h3&gt;
&lt;p&gt;The article starts with a file metadata that pelican uses to get information about the article.  &lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Title&lt;/code&gt;: Heading of the blog post. is a required field for every Post  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Author&lt;/code&gt;: Author of the blog post  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt;: Date the article was published in the format YYYY-mm-dd hh:mm  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Category&lt;/code&gt;: Used to Classify the Blog Post  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tags&lt;/code&gt;: This contains topics the post covers, separated by a comma  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Summary&lt;/code&gt;: A one or 2 line summary of your post. Will be displayed on the index page. if this is not defined, Pelican Truncates your blog post to be used as the summary.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Slug&lt;/code&gt;: This will be the name of the HTML file generated. if not defined, Pelican uses the title separated by commas  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other Metadata can be seen on the pelican documentation page  &lt;/p&gt;
&lt;h3&gt;Main Body&lt;/h3&gt;
&lt;p&gt;The Main Body of the Article follows the basic Markdown syntax. for more information on writing in markdown click &lt;a href="https://www.markdownguide.org/basic-syntax/" target="_blank"&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding Static Files&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Static Files such as images, documents can be linked to each article, by referencing the file location in markdown syntax. Pelican should be made aware of these locations by adding it to the STATIC_PATH variable in the pelicanconf.py file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vi&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pdfs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zipfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Images&lt;/strong&gt;  : &lt;code&gt;![alt]({filename}/images/han.jpg)&lt;/code&gt; &lt;br&gt;
some alternate text will be displayed if the image is not found. Also note, the static path folders are included in the "content" folder&lt;br&gt;
images can also be referenced using HTML syntax such as &lt;code&gt;&amp;lt;img src="/images/han.jpg"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Files&lt;/strong&gt;: For creating download links such as pdfs and zip files, Add the download location to static paths&lt;br&gt;
&lt;code&gt;[Our Menu]({static}/pdfs/menu.pdf)&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Adding Links&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;External links can be referenced using both markdown and HTML syntax&lt;br&gt;
Markdown: &lt;code&gt;[Link](https:\\www.example.com\)&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;HTML: &lt;code&gt;&amp;lt;a href="www.example.com"&amp;gt;link&amp;lt;\a&amp;gt;&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;internal links to contents like previous articles&lt;br&gt;
&lt;code&gt;[Post]({filename}/articles/oldfile.md)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding code syntax highlighting&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Pelican handles code syntax using the Markdown CodeHilite extension. To use this, include the language identifier just above the code block, indenting both the identifier and the code&lt;/p&gt;
&lt;p&gt;Code Syntax without Line numbers&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some code without line numbers.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Code syntax with Line numbers&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some code with line numbers.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Post-Content Creation&lt;/h2&gt;
&lt;p&gt;After creating the new content, use the &lt;code&gt;pelican content&lt;/code&gt; command to generate the HTML Pages. You can also use &lt;code&gt;make devserver&lt;/code&gt; to generate HTML and serve the Page locally on your development environment.&lt;/p&gt;
&lt;p&gt;Your content can now be viewed on &lt;code&gt;localhost:8000&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src="/images/pelican_default_theme.JPG" alt="pelican default theme"&gt;
&lt;p style="text-align: center;"&gt;&lt;b&gt;pelican default theme&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;The working version can now be commited and merged with the master branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default pelican site&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Next Article on &lt;strong&gt;Customizing your Site&lt;/strong&gt; can be found &lt;a href="https://www.seyiobaweya.tech/articles/2020-01-28/customizing-your-site/"&gt;Here&lt;/a&gt;&lt;/p&gt;</content><category term="Web_Development"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Automating Project Setup with Bash</title><link href="https://www.seyiobaweya.tech/articles/2020-01-17/new-project-script/" rel="alternate"></link><published>2020-01-17T10:20:00+00:00</published><updated>2020-01-17T10:20:00+00:00</updated><author><name>Seyi Obaweya</name></author><id>tag:www.seyiobaweya.tech,2020-01-17:/articles/2020-01-17/new-project-script/</id><summary type="html">&lt;p&gt;The new project script is a tool that was created to simplify the process of starting a new project by automating creating your project folder and GitHub repo using the GitHub API. Hopefully, this saves you some time and simplifies your Git management.&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my plans for 2020 is working on more projects and pushing them to Github to share as well as act as a portofolio for prospective employers. i decided to reduce the barriers to achieving this goal by working on Tools to make my day to day tasks more efficient, Hence the newproject script.&lt;br&gt;
This tool aims to automate the process of starting a new project as well as forcing me to upload all my projects on github.  &lt;/p&gt;
&lt;p&gt;The manual Process of Starting a Project is :  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to your project folder and create new folder  &lt;/li&gt;
&lt;li&gt;Initialize Git Repo in new Directory  &lt;/li&gt;
&lt;li&gt;Create a ReadMe file  &lt;/li&gt;
&lt;li&gt;Stage ReadMe File  &lt;/li&gt;
&lt;li&gt;Create First Commit  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;on the Github Page  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create New Repo  &lt;/li&gt;
&lt;li&gt;Copy Origin Address  &lt;/li&gt;
&lt;li&gt;Add remote Origin to your project Directory  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided to automate this process using a bash script due to Linux being my preferred dev environment (Ubuntu WSL2). I however intend to later port the script to a python script to enable it work on numerous platforms. &lt;/p&gt;
&lt;h3&gt;New Project Script&lt;/h3&gt;
&lt;p&gt;This is a fairly easy script to understand, i will walk you through some of the snippets which could be useful for creating your own scripts&lt;br&gt;
To Skip to script usage click here &lt;a href="#usage"&gt;here&lt;/a&gt;&lt;br&gt;
GitHub Link to project is &lt;a href="https://github.com/seyio91/newprojectscript" target="_blank"&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating a Repo with the Github API&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -u &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USERNAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; https://api.github.com/user/repos -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;name&amp;quot;:&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$REPO_NAME&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;}&amp;#39;&lt;/span&gt; &amp;gt; /dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the curl command takes the url which consists of the github username, personal access token and repo name as the data to create the new repository
the output is passed to /dev/null so it is not displayed on the script as some json object is returned on success.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setting Default Variables&lt;/strong&gt;    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PROJECT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PROJECT_DIR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_DIR&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this is used to set a default value to a variable, if the variable is not defined, it takes the 2nd value as its new value. A default_dir is hardcoded, if the Project_dir variable is not passed in to the script, the project_Dir variable takes the values of the default dir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bash Functions&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Bash functions work almost the same way as every other scripting language, it is used in the script to define repetitive tasks. 
An example is coloring functions for my error and success messages. The process of getting a colored text is below  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033[0m&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;greentext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033[32m&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="nv"&gt;$greentext&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;this color should be displayed as green to signify success&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$normal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This quickly becomes stressful if you have to do it a couple of times.&lt;br&gt;
Defining a function which takes in an argument of message can be used to improve this.
note bash does take in arguments in the name definitions, this can be passed into the function using the &lt;code&gt;$1&lt;/code&gt; arguments. &lt;br&gt;
Also the &lt;code&gt;local&lt;/code&gt; keyword is used to make the variable local to the function so it does not change variables having the same name outside the function scope  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;success &lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="nv"&gt;$greentext&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$msg&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$normal&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

success &lt;span class="s2"&gt;&amp;quot;this color should be displayed as green to signify success&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Other functions that were created are  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;usage&lt;/code&gt; : function to display error and how the script should be used. this is called at every conditions where the script will exit  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cleanup&lt;/code&gt; : this is used to clean up files that were created if an error occurs after folders have been created in the script.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nameCheck&lt;/code&gt; : function to check if repo name meets the required conventions using regex.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Parsing Commandline Arguments&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;This is popular in most linux commands e.g cp -r source destination. the Minus sign are commandline arguments which are used to alter the default behavior of the script. Parsing of this argument is done through getopts.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;d:u:t:f:ih&amp;quot;&lt;/span&gt; option&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in

    i &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;INTERACTIVE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    d &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;PROJECT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$OPTARG&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    f &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;REPO_FOLDER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$OPTARG&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    u &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;GITHUB_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$OPTARG&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    t &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$OPTARG&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    h &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;HELP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="se"&gt;\?&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; usage
        &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;OPTIND &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;getopts will take a list of characters that it will accept, &lt;code&gt;"d:u:tf"&lt;/code&gt;, each character that is followed by a &lt;code&gt;":"&lt;/code&gt; will be accepting an argument, while others act as flags.&lt;br&gt;
example  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newproject -d argumentforD -i
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;argumentforD&lt;/code&gt; is passed as the argument for &lt;code&gt;d&lt;/code&gt;, while &lt;code&gt;i&lt;/code&gt; does not need any argument passed to it. The argument for D is stored in the &lt;code&gt;OPTARG&lt;/code&gt; variable which can then be reassigned to your defined variable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$option&lt;/code&gt; is the variable used to store the current character the while loop is on from the list of arguments. e.g it stores &lt;code&gt;-d&lt;/code&gt; as d, which can then be checked in the case statement to carry out the corresponding action i.e set the variable in my case&lt;/p&gt;
&lt;p&gt;case statement works the same way as every other language, the only difference here is the &lt;code&gt;\?&lt;/code&gt; which is used to specify everyother character that i did not define in my case statement. my usage function is passed to trigger an error when an invalid character is passed  &lt;/p&gt;
&lt;p&gt;the last part of the getopts is the &lt;code&gt;shift $((OPTIND -1))&lt;/code&gt; statement. this helps in processing the arguments by shifting the current character that has been processed. e.g in example, after &lt;code&gt;-d&lt;/code&gt; is processed, &lt;code&gt;-f&lt;/code&gt; should be processed.  &lt;/p&gt;
&lt;p&gt;for more info about the getopts command: &lt;a href="https://www.shellscript.sh/tips/getopts/" target="_blank" &gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt;&lt;br&gt;
Various Tests were used all through the script. the basic syntax for the tests is  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;if&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; sometest &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    some action
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;if else statement&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; sometest &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    some action
&lt;span class="k"&gt;else&lt;/span&gt;
    some other action
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;if elseif&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; sometest &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    some action
&lt;span class="k"&gt;elif&lt;/span&gt;
    some other action
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Test Conditions&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[ -n *$VARIABLE ]]&lt;/code&gt; # if a variable is set. &lt;code&gt;! -n $VARIABLE&lt;/code&gt; is for the reverse case. not set  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[ -d $VARIABLE ]]&lt;/code&gt; check if $value is a folder  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[ -e $VARIABLE ]]&lt;/code&gt; check if folder/file exist  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[ $VARIABLE = "somevalue" ]]&lt;/code&gt; if specific condition is met&lt;br&gt;
bash uses "=" rather than the double equal sign in most languages.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[ $VARIABLE =~ [$someregexvariable] ]]&lt;/code&gt; to check if value does not match regex.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reading file input&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;this is used to drive the interactive part of the script.&lt;br&gt;
the read command is used to read input and pass to the variable passed to the command  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Enter Project Folder: (somedefault) : &amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;read&lt;/span&gt; PROJECT_DIR
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PROJECT_DIR&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;Enter Project Folder: (somedefault) : /home/seyi/projectfolder&amp;quot;&lt;/span&gt; 
&lt;span class="s2"&gt;&amp;quot;/home/seyi/projectfolder&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div id="usage"&gt;&lt;/div&gt;

&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Github personal access token&lt;/strong&gt; is required to create repo as well as making commits. Link on Creating your Personal Access Token is &lt;a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line" target="_blank"&gt;Here&lt;/a&gt;.&lt;br&gt;
&lt;strong&gt;JQ Program&lt;/strong&gt; for parsing responses from the git api. This checks if there is an existing repo with the same name on users github page   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing JQ Dependency&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;for debian  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;jq&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for redhat&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install jq
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Usage: newproject [ -i | -d | -f | -u | -t | -h ] repo_name&amp;quot;&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;-i : Interactive Prompt&amp;quot;&lt;/span&gt;   
&lt;span class="s2"&gt;&amp;quot;-d : Projects Directory&amp;quot;&lt;/span&gt; 
&lt;span class="s2"&gt;&amp;quot;-f : Folder for Storing Repo&amp;quot;&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;-u : Github Username&amp;quot;&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;-t : Github Personal Access Token&amp;quot;&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;-h : Help&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Basic Usage&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newproject reponame
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;newproject script will create folder with the reponame in the directory set in the DEFAULT_DIR variable.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newproject -d /home/system/opt -f newfolder reponame
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Project folder "newfolder" will be created in the directory passed to -d flag.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newproject -u seyio91 -t dummy_token reponame
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;username and token will overwrite the variables exported to shell environment during setup  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newproject -i reponame
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Starts the interactive session&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newproject -i reponame
&lt;span class="s2"&gt;&amp;quot;Enter project Default Folder: (/home/seyi/projects)&amp;quot;&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;Enter project Folder- Repo name will be used if no default:  ()&amp;quot;&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;Enter Git Username:  (seyio91)&amp;quot;&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;Enter Git Token:  (dummy_token)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To view help options  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newproject -h
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Planned Improvements.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Specific Project Types. Ability to specify the type of project and create directory structure by project e.g creating virtual env for python or dockerfiles for docker projects  &lt;/li&gt;
&lt;li&gt;Add Testing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitHub Link to project is &lt;a href="https://github.com/seyio91/newprojectscript" target="_blank"&gt;Here&lt;/a&gt;&lt;/p&gt;</content><category term="Bash_Automation"></category><category term="bash"></category><category term="git"></category></entry></feed>